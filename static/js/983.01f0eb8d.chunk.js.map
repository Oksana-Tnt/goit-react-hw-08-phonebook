{"version":3,"file":"static/js/983.01f0eb8d.chunk.js","mappings":"8PAqEO,SAASA,EAASC,GACvB,IAAQC,GAAUC,EAAAA,EAAAA,MAAVD,MACFE,GAAiBC,EAAAA,EAAAA,MAEvB,OAAOC,EAAAA,EAAAA,UACL,kBACEC,EAAAA,EAAAA,IAAcL,EAAMM,WAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACfL,GACAH,GACJ,GACH,CAACA,EAASC,EAAMM,UAAWJ,GAE/B,CAEA,I,kGCuCA,EAxGyB,WAAO,IAADM,EAAAC,EACvBC,GAAWC,EAAAA,EAAAA,MACjBC,GAMIC,EAAAA,EAAAA,IAAQ,CACVC,cAAe,CAAEC,KAAM,OAAQC,MAAO,QAASC,SAAU,cANzDC,EAAQN,EAARM,SACAC,EAAYP,EAAZO,aACAC,EAAKR,EAALQ,MACAC,EAAKT,EAALS,MACaC,EAAMV,EAAnBW,UAAaD,OAMTN,EAAQI,EAAM,SACdH,EAAWG,EAAM,YAEjBI,GAAWC,EAAAA,EAAAA,MAEXC,EAAQ5B,IAmBd,OACE6B,EAAAA,EAAAA,KAACC,EAAAA,EAAc,CAACC,KAAK,OAAMC,UACzBH,EAAAA,EAAAA,KAACI,EAAAA,GAAG,CAACC,QAAQ,OAAOC,EAAE,QAAQC,cAAc,SAAQJ,UAClDK,EAAAA,EAAAA,MAAA,QAAMC,SAAUjB,GApBL,SAAAkB,GACfb,GAASc,EAAAA,EAAAA,IAAYD,IACrBb,GAASe,EAAAA,EAAAA,IAAW,CAAEvB,MAAAA,EAAOC,SAAAA,KAE7BS,EAAM,CACJc,MAAO,mBACPC,YAAa,sCACbC,OAAQ,UACRC,SAAU,IACVC,YAAY,IAGdlC,EAAS,cAETW,GACF,IAK6CS,SAAA,EACrCH,EAAAA,EAAAA,KAACkB,EAAAA,EAAS,CAACC,MAAM,MAAMC,WAAW,gBAAejB,SAAC,UAGlDH,EAAAA,EAAAA,KAACqB,EAAAA,GAAKzC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACAW,EAAS,OAAQ,CACnB+B,SAAU,mBACVC,UAAW,CACTC,MAAO,EACPC,QAAS,sBAEX,IACFC,KAAK,OACLC,YAAY,WACZC,aAAa,WACbC,KAAK,KACLC,GAAI,MAEN9B,EAAAA,EAAAA,KAAC+B,EAAAA,EAAI,CAAA5B,SAAER,EAAOP,KAAKqC,WACnBzB,EAAAA,EAAAA,KAACkB,EAAAA,EAAS,CAACC,MAAM,MAAMC,WAAW,gBAAejB,SAAC,WAGlDH,EAAAA,EAAAA,KAACqB,EAAAA,GAAKzC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACAW,EAAS,QAAS,CACpB+B,UAAU,EACVC,UAAW,CACTC,MAAO,EACPC,QAAS,sBAEX,IACFC,KAAK,QACLE,aAAa,QACbC,KAAK,KACLC,GAAI,MAEN9B,EAAAA,EAAAA,KAAC+B,EAAAA,EAAI,CAAA5B,SAAc,QAAdtB,EAAEc,EAAON,aAAK,IAAAR,OAAA,EAAZA,EAAc4C,WACrBzB,EAAAA,EAAAA,KAACkB,EAAAA,EAAS,CAACC,MAAM,MAAMC,WAAW,gBAAejB,SAAC,cAGlDH,EAAAA,EAAAA,KAACqB,EAAAA,GAAKzC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACAW,EAAS,WAAY,CACvB+B,UAAU,EACVC,UAAW,CACTC,MAAO,EACPC,QAAS,uBAEX,IACFG,aAAa,WACbD,YAAY,WACZE,KAAK,KACLC,GAAI,MAEN9B,EAAAA,EAAAA,KAAC+B,EAAAA,EAAI,CAAA5B,SAAiB,QAAjBrB,EAAEa,EAAOL,gBAAQ,IAAAR,OAAA,EAAfA,EAAiB2C,WACxBzB,EAAAA,EAAAA,KAACgC,EAAAA,EAAM,CAAA7B,UACLH,EAAAA,EAAAA,KAACiC,EAAAA,EAAM,CAACP,KAAK,SAASQ,YAAY,MAAML,KAAK,KAAKM,MAAM,OAAMhC,SAAC,oBAQ3E,E,wCClFA,EA9BqB,WACnB,IAAMpB,GAAWC,EAAAA,EAAAA,MAIXoD,GAAmBC,EAAAA,EAAAA,eAAc,CAAEC,MAAO,wBAChD,OACE9B,EAAAA,EAAAA,MAACJ,EAAAA,GAAG,CACFmC,EAAE,QACFC,gBAAiBJ,EAAmBK,EAAsBC,EAC1DC,mBAAmB,SACnBC,iBAAiB,YACjBC,eAAe,QAAO1C,SAAA,EAEtBH,EAAAA,EAAAA,KAAC8C,EAAAA,EAAI,CAACC,QAAQ,MAAMC,GAAI,EAAGC,GAAI,EAAE9C,UAC/BH,EAAAA,EAAAA,KAACiC,EAAAA,EAAM,CACLP,KAAK,SACLQ,YAAY,MACZL,KAAK,KACLM,MAAM,OACNe,QAlBY,WAClBnE,EAAS,SACX,EAgB6BoB,SACtB,cAIHH,EAAAA,EAAAA,KAACmD,EAAgB,MAGvB,C","sources":["../node_modules/@chakra-ui/toast/src/use-toast.tsx","components/RegistrationForm/RegistrationForm.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import type { AlertStatus } from \"@chakra-ui/alert\"\nimport { StyleProps, ThemingProps, useChakra } from \"@chakra-ui/system\"\nimport type { RenderProps, ToastId, ToastOptions } from \"./toast.types\"\nimport { createToastFn, CreateToastFnReturn } from \"./toast\"\nimport { ToastPosition } from \"./toast.placement\"\nimport { useMemo } from \"react\"\nimport { useToastOptionContext } from \"./toast.provider\"\n\nexport interface UseToastOptions extends ThemingProps<\"Alert\"> {\n  /**\n   * The placement of the toast\n   *\n   * @default \"bottom\"\n   */\n  position?: ToastPosition\n  /**\n   * The delay before the toast hides (in milliseconds)\n   * If set to `null`, toast will never dismiss.\n   *\n   * @default 5000 ( = 5000ms )\n   */\n  duration?: ToastOptions[\"duration\"]\n  /**\n   * Render a component toast component.\n   * Any component passed will receive 2 props: `id` and `onClose`.\n   */\n  render?(props: RenderProps): React.ReactNode\n  /**\n   * The title of the toast\n   */\n  title?: React.ReactNode\n  /**\n   * The description of the toast\n   */\n  description?: React.ReactNode\n  /**\n   * If `true`, toast will show a close button\n   * @default false\n   */\n  isClosable?: boolean\n  /**\n   * The status of the toast.\n   */\n  status?: AlertStatus\n  /**\n   * A custom icon that will be displayed by the toast.\n   */\n  icon?: React.ReactNode\n  /**\n   * The `id` of the toast.\n   *\n   * Mostly used when you need to prevent duplicate.\n   * By default, we generate a unique `id` for each toast\n   */\n  id?: ToastId\n  /**\n   * Callback function to run side effects after the toast has closed.\n   */\n  onCloseComplete?: () => void\n  /**\n   * Optional style overrides for the container wrapping the toast component.\n   */\n  containerStyle?: StyleProps\n}\n\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\nexport function useToast(options?: UseToastOptions): CreateToastFnReturn {\n  const { theme } = useChakra()\n  const defaultOptions = useToastOptionContext()\n\n  return useMemo(\n    () =>\n      createToastFn(theme.direction, {\n        ...defaultOptions,\n        ...options,\n      }),\n    [options, theme.direction, defaultOptions],\n  )\n}\n\nexport default useToast\n","import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport {\n  AbsoluteCenter,\n  Box,\n  Button,\n  Center,\n  FormLabel,\n  Input,\n  Text,\n  useToast,\n} from '@chakra-ui/react';\nimport { useNavigate } from 'react-router-dom';\nimport { loginThunk, signUpThunk } from 'redux/auth/thunk';\nimport { useDispatch } from 'react-redux';\n\nconst RegistrationForm = () => {\n  const navigate = useNavigate();\n  const {\n    register,\n    handleSubmit,\n    watch,\n    reset,\n    formState: { errors },\n  } = useForm({\n    defaultValues: { name: 'user', email: 'email', password: 'password' },\n  });\n\n  // const name = watch('name');\n  const email = watch('email');\n  const password = watch('password');\n\n  const dispatch = useDispatch();\n\n  const toast = useToast();\n\n  const onSubmit = data => {\n    dispatch(signUpThunk(data));\n    dispatch(loginThunk({ email, password }));\n\n    toast({\n      title: 'Account created.',\n      description: \"We've created your account for you.\",\n      status: 'success',\n      duration: 4000,\n      isClosable: true,\n    });\n\n    navigate('/phonebook');\n\n    reset();\n  };\n\n  return (\n    <AbsoluteCenter axis=\"both\">\n      <Box display=\"flex\" w=\"200px\" flexDirection=\"column\">\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <FormLabel color=\"red\" textShadow=\"1px 1px black\">\n            Name\n          </FormLabel>\n          <Input\n            {...register('name', {\n              required: 'This is required',\n              minLength: {\n                value: 6,\n                message: 'Min length is 6',\n              },\n            })}\n            type=\"text\"\n            placeholder=\"username\"\n            autoComplete=\"username\"\n            size=\"md\"\n            mb={4}\n          />\n          <Text>{errors.name.message}</Text>\n          <FormLabel color=\"red\" textShadow=\"1px 1px black\">\n            Email\n          </FormLabel>\n          <Input\n            {...register('email', {\n              required: true,\n              minLength: {\n                value: 6,\n                message: 'Min length is 6',\n              },\n            })}\n            type=\"email\"\n            autoComplete=\"email\"\n            size=\"md\"\n            mb={4}\n          />\n          <Text>{errors.email?.message}</Text>\n          <FormLabel color=\"red\" textShadow=\"1px 1px black\">\n            Password\n          </FormLabel>\n          <Input\n            {...register('password', {\n              required: true,\n              minLength: {\n                value: 6,\n                message: 'Min length is 10',\n              },\n            })}\n            autoComplete=\"password\"\n            placeholder=\"password\"\n            size=\"md\"\n            mb={4}\n          />\n          <Text>{errors.password?.message}</Text>\n          <Center>\n            <Button type=\"submit\" colorScheme=\"red\" size=\"sm\" width=\"75px\">\n              Sign up\n            </Button>\n          </Center>\n        </form>\n      </Box>\n    </AbsoluteCenter>\n  );\n};\n\nexport default RegistrationForm;\n","import RegistrationForm from 'components/RegistrationForm/RegistrationForm';\nimport React from 'react';\nimport backgroundImg from '../images/benjaminrobyn-jespersen-Ai9_QJaZfMc-unsplash.jpg';\nimport backgroundImgMobile from '../images/grey-gradient-background-1080-x-1920-mva29ml67gjxd6ht.jpg';\nimport { Box, Button, Wrap } from '@chakra-ui/react';\nimport { useNavigate } from 'react-router-dom';\nimport { useMediaQuery } from 'react-responsive';\n\nconst RegisterPage = () => {\n  const navigate = useNavigate();\n  const handleLogin = () => {\n    navigate('/login');\n  };\n  const isTabletOrMobile = useMediaQuery({ query: '(max-width: 1224px)' });\n  return (\n    <Box\n      h=\"100vh\"\n      backgroundImage={isTabletOrMobile ? backgroundImgMobile : backgroundImg}\n      backgroundPosition=\"center\"\n      backgroundRepeat=\"no-repeat\"\n      backgroundSize=\"cover\"\n    >\n      <Wrap justify=\"end\" pt={4} pr={4}>\n        <Button\n          type=\"button\"\n          colorScheme=\"red\"\n          size=\"sm\"\n          width=\"75px\"\n          onClick={handleLogin}\n        >\n          Log in\n        </Button>\n      </Wrap>\n      <RegistrationForm />\n    </Box>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["useToast","options","theme","useChakra","defaultOptions","useToastOptionContext","useMemo","createToastFn","direction","_objectSpread","_errors$email","_errors$password","navigate","useNavigate","_useForm","useForm","defaultValues","name","email","password","register","handleSubmit","watch","reset","errors","formState","dispatch","useDispatch","toast","_jsx","AbsoluteCenter","axis","children","Box","display","w","flexDirection","_jsxs","onSubmit","data","signUpThunk","loginThunk","title","description","status","duration","isClosable","FormLabel","color","textShadow","Input","required","minLength","value","message","type","placeholder","autoComplete","size","mb","Text","Center","Button","colorScheme","width","isTabletOrMobile","useMediaQuery","query","h","backgroundImage","backgroundImgMobile","backgroundImg","backgroundPosition","backgroundRepeat","backgroundSize","Wrap","justify","pt","pr","onClick","RegistrationForm"],"sourceRoot":""}