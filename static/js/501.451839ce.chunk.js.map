{"version":3,"file":"static/js/501.451839ce.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.jsx","pages/LoginPage.jsx","../node_modules/@chakra-ui/toast/src/use-toast.tsx"],"sourcesContent":["import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useDispatch } from 'react-redux';\nimport { loginThunk } from 'redux/auth/thunk';\n\nimport { Text, useToast } from '@chakra-ui/react';\n\nimport {\n  FormLabel,\n  Input,\n  Button,\n  Box,\n  Center,\n  AbsoluteCenter,\n} from '@chakra-ui/react';\n\nconst LoginForm = () => {\n  const {\n    register,\n    handleSubmit,\n\n    formState: { errors },\n    reset,\n  } = useForm({ defaultValues: { email: 'email', password: 'password' } });\n\n  const dispatch = useDispatch();\n\n  // const authError = useSelector(authSelectors.getError);\n\n  const toast = useToast();\n\n  const onSubmit = data => {\n    dispatch(loginThunk(data))\n      .unwrap()\n      .catch(() => {\n        toast({\n          title: 'Error log in',\n          description: 'Please, enter the correct data',\n          status: 'error',\n          duration: 5000,\n          isClosable: true,\n        });\n      });\n\n    reset();\n  };\n  return (\n    <>\n      <AbsoluteCenter axis=\"both\">\n        <Box w=\"200px\">\n          <form onSubmit={handleSubmit(onSubmit)} autoComplete=\"off\">\n            <FormLabel color=\"red\" textShadow=\"1px 1px black\">\n              Email\n            </FormLabel>\n\n            <Input\n              {...register('email', {\n                required: true,\n                minLength: {\n                  value: 6,\n                  message: 'Min length is 6',\n                },\n              })}\n              type=\"email\"\n              placeholder=\"user@gmail.com\"\n              autoComplete=\"off\"\n              size=\"md\"\n              mb={4}\n            />\n            <Text>{errors.email?.message}</Text>\n            <FormLabel color=\"red\" textShadow=\"1px 1px black\">\n              Password\n            </FormLabel>\n\n            <Input\n              {...register('password', {\n                required: true,\n                minLength: {\n                  value: 6,\n                  message: 'Min length is 6',\n                },\n              })}\n              type=\"password\"\n              placeholder=\"password\"\n              autoComplete=\"off\"\n              size=\"md\"\n              mb={4}\n            />\n            <Text>{errors.password?.message}</Text>\n            <Center>\n              <Button type=\"submit\" colorScheme=\"red\" size=\"sm\" width=\"75px\">\n                Log in\n              </Button>\n            </Center>\n          </form>\n        </Box>\n      </AbsoluteCenter>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import LoginForm from 'components/LoginForm/LoginForm';\nimport React from 'react';\nimport { Box, Button, Wrap } from '@chakra-ui/react';\n\nimport backgroundImg from '../images/benjaminrobyn-jespersen-Ai9_QJaZfMc-unsplash.jpg';\nimport backgroundImgMobile from '../images/grey-gradient-background-1080-x-1920-mva29ml67gjxd6ht.jpg';\nimport { useNavigate } from 'react-router-dom';\nimport { useMediaQuery } from 'react-responsive';\n\nconst LoginPage = () => {\n  const navigate = useNavigate();\n  const handleSignUp = () => {\n    navigate('/signUp');\n  };\n\n  const isTabletOrMobile = useMediaQuery({ query: '(max-width: 1200px)' });\n\n  return (\n    <Box\n      h=\"100vh\"\n      backgroundImage={isTabletOrMobile ? backgroundImgMobile : backgroundImg}\n      backgroundPosition=\"center\"\n      backgroundRepeat=\"no-repeat\"\n      backgroundSize=\"cover\"\n    >\n      <Wrap justify=\"end\" pt={4} pr={4}>\n        <Button\n          type=\"button\"\n          colorScheme=\"red\"\n          size=\"sm\"\n          width=\"75px\"\n          onClick={handleSignUp}\n        >\n          Sign up\n        </Button>\n      </Wrap>\n\n      <LoginForm />\n    </Box>\n  );\n};\n\nexport default LoginPage;\n","import type { AlertStatus } from \"@chakra-ui/alert\"\nimport { StyleProps, ThemingProps, useChakra } from \"@chakra-ui/system\"\nimport type { RenderProps, ToastId, ToastOptions } from \"./toast.types\"\nimport { createToastFn, CreateToastFnReturn } from \"./toast\"\nimport { ToastPosition } from \"./toast.placement\"\nimport { useMemo } from \"react\"\nimport { useToastOptionContext } from \"./toast.provider\"\n\nexport interface UseToastOptions extends ThemingProps<\"Alert\"> {\n  /**\n   * The placement of the toast\n   *\n   * @default \"bottom\"\n   */\n  position?: ToastPosition\n  /**\n   * The delay before the toast hides (in milliseconds)\n   * If set to `null`, toast will never dismiss.\n   *\n   * @default 5000 ( = 5000ms )\n   */\n  duration?: ToastOptions[\"duration\"]\n  /**\n   * Render a component toast component.\n   * Any component passed will receive 2 props: `id` and `onClose`.\n   */\n  render?(props: RenderProps): React.ReactNode\n  /**\n   * The title of the toast\n   */\n  title?: React.ReactNode\n  /**\n   * The description of the toast\n   */\n  description?: React.ReactNode\n  /**\n   * If `true`, toast will show a close button\n   * @default false\n   */\n  isClosable?: boolean\n  /**\n   * The status of the toast.\n   */\n  status?: AlertStatus\n  /**\n   * A custom icon that will be displayed by the toast.\n   */\n  icon?: React.ReactNode\n  /**\n   * The `id` of the toast.\n   *\n   * Mostly used when you need to prevent duplicate.\n   * By default, we generate a unique `id` for each toast\n   */\n  id?: ToastId\n  /**\n   * Callback function to run side effects after the toast has closed.\n   */\n  onCloseComplete?: () => void\n  /**\n   * Optional style overrides for the container wrapping the toast component.\n   */\n  containerStyle?: StyleProps\n}\n\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\nexport function useToast(options?: UseToastOptions): CreateToastFnReturn {\n  const { theme } = useChakra()\n  const defaultOptions = useToastOptionContext()\n\n  return useMemo(\n    () =>\n      createToastFn(theme.direction, {\n        ...defaultOptions,\n        ...options,\n      }),\n    [options, theme.direction, defaultOptions],\n  )\n}\n\nexport default useToast\n"],"names":["_errors$email","_errors$password","_useForm","useForm","defaultValues","email","password","register","handleSubmit","errors","formState","reset","dispatch","useDispatch","toast","useToast","_jsx","_Fragment","children","AbsoluteCenter","axis","Box","w","_jsxs","onSubmit","data","loginThunk","unwrap","catch","title","description","status","duration","isClosable","autoComplete","FormLabel","color","textShadow","Input","_objectSpread","required","minLength","value","message","type","placeholder","size","mb","Text","Center","Button","colorScheme","width","navigate","useNavigate","isTabletOrMobile","useMediaQuery","query","h","backgroundImage","backgroundImgMobile","backgroundImg","backgroundPosition","backgroundRepeat","backgroundSize","Wrap","justify","pt","pr","onClick","LoginForm","options","theme","useChakra","defaultOptions","useToastOptionContext","useMemo","createToastFn","direction"],"sourceRoot":""}