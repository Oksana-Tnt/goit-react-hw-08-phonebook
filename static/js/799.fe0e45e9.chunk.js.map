{"version":3,"file":"static/js/799.fe0e45e9.chunk.js","mappings":"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","sources":["components/RegistrationForm/RegistrationForm.jsx","pages/RegisterPage.jsx","../node_modules/@chakra-ui/toast/src/use-toast.tsx"],"sourcesContent":["import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport {\n  AbsoluteCenter,\n  Box,\n  Button,\n  Center,\n  FormLabel,\n  Input,\n  Text,\n  useToast,\n} from '@chakra-ui/react';\nimport { useNavigate } from 'react-router-dom';\nimport { loginThunk, signUpThunk } from 'redux/auth/thunk';\nimport { useDispatch } from 'react-redux';\n\nconst RegistrationForm = () => {\n  const navigate = useNavigate();\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    defaultValues: { name: '', email: '', password: '' },\n  });\n\n  const dispatch = useDispatch();\n\n  const toast = useToast();\n\n  const onSubmit = data => {\n    dispatch(signUpThunk(data));\n    dispatch(loginThunk(data));\n\n    toast({\n      title: 'Account created.',\n      description: \"We've created your account for you.\",\n      status: 'success',\n      duration: 4000,\n      isClosable: true,\n    });\n\n    navigate('/phonebook');\n\n    reset();\n  };\n\n  return (\n    <AbsoluteCenter axis=\"both\">\n      <Box display=\"flex\" w=\"200px\" flexDirection=\"column\">\n        <form onSubmit={handleSubmit(onSubmit)} autoComplete=\"off\">\n          <FormLabel color=\"red\" textShadow=\"1px 1px white\" mt={5}>\n            Name\n          </FormLabel>\n          <Input\n            {...register('name', {\n              required: 'This is required',\n              minLength: {\n                value: 6,\n                message: 'Min length is 6',\n              },\n            })}\n            type=\"text\"\n            placeholder=\"username\"\n            size=\"md\"\n            mb={4}\n          />\n          <Text>{errors.name?.message}</Text>\n          <FormLabel color=\"red\" textShadow=\"1px 1px white\">\n            Email\n          </FormLabel>\n          <Input\n            {...register('email', {\n              required: true,\n              minLength: {\n                value: 6,\n                message: 'Min length is 6',\n              },\n            })}\n            type=\"email\"\n            size=\"md\"\n            mb={4}\n          />\n          <Text>{errors.email?.message}</Text>\n          <FormLabel color=\"red\" textShadow=\"1px 1px white\">\n            Password\n          </FormLabel>\n          <Input\n            {...register('password', {\n              required: true,\n              minLength: {\n                value: 6,\n                message: 'Min length is 10',\n              },\n            })}\n            placeholder=\"password\"\n            size=\"md\"\n            mb={4}\n          />\n          <Text>{errors.password?.message}</Text>\n          <Center>\n            <Button type=\"submit\" colorScheme=\"red\" size=\"sm\" width=\"75px\">\n              Sign up\n            </Button>\n          </Center>\n        </form>\n      </Box>\n    </AbsoluteCenter>\n  );\n};\n\nexport default RegistrationForm;\n","import RegistrationForm from 'components/RegistrationForm/RegistrationForm';\nimport React from 'react';\nimport backgroundImg from '../images/benjaminrobyn-jespersen-Ai9_QJaZfMc-unsplash.jpg';\nimport backgroundImgMobile from '../images/grey-gradient-background-1080-x-1920-mva29ml67gjxd6ht.jpg';\nimport { Box, Button, Wrap } from '@chakra-ui/react';\nimport { useNavigate } from 'react-router-dom';\nimport { useMediaQuery } from 'react-responsive';\n\nconst RegisterPage = () => {\n  const navigate = useNavigate();\n  const handleLogin = () => {\n    navigate('/login');\n  };\n  const isTabletOrMobile = useMediaQuery({ query: '(max-width: 1220px)' });\n  return (\n    <Box\n      h=\"100vh\"\n      backgroundImage={isTabletOrMobile ? backgroundImgMobile : backgroundImg}\n      backgroundPosition=\"center\"\n      backgroundRepeat=\"no-repeat\"\n      backgroundSize=\"cover\"\n    >\n      <Wrap justify=\"end\" pt={4} pr={4}>\n        <Button\n          type=\"button\"\n          colorScheme=\"red\"\n          size=\"sm\"\n          width=\"75px\"\n          onClick={handleLogin}\n        >\n          Log in\n        </Button>\n      </Wrap>\n      <RegistrationForm />\n    </Box>\n  );\n};\n\nexport default RegisterPage;\n","import type { AlertStatus } from \"@chakra-ui/alert\"\nimport { StyleProps, ThemingProps, useChakra } from \"@chakra-ui/system\"\nimport type { RenderProps, ToastId, ToastOptions } from \"./toast.types\"\nimport { createToastFn, CreateToastFnReturn } from \"./toast\"\nimport { ToastPosition } from \"./toast.placement\"\nimport { useMemo } from \"react\"\nimport { useToastOptionContext } from \"./toast.provider\"\n\nexport interface UseToastOptions extends ThemingProps<\"Alert\"> {\n  /**\n   * The placement of the toast\n   *\n   * @default \"bottom\"\n   */\n  position?: ToastPosition\n  /**\n   * The delay before the toast hides (in milliseconds)\n   * If set to `null`, toast will never dismiss.\n   *\n   * @default 5000 ( = 5000ms )\n   */\n  duration?: ToastOptions[\"duration\"]\n  /**\n   * Render a component toast component.\n   * Any component passed will receive 2 props: `id` and `onClose`.\n   */\n  render?(props: RenderProps): React.ReactNode\n  /**\n   * The title of the toast\n   */\n  title?: React.ReactNode\n  /**\n   * The description of the toast\n   */\n  description?: React.ReactNode\n  /**\n   * If `true`, toast will show a close button\n   * @default false\n   */\n  isClosable?: boolean\n  /**\n   * The status of the toast.\n   */\n  status?: AlertStatus\n  /**\n   * A custom icon that will be displayed by the toast.\n   */\n  icon?: React.ReactNode\n  /**\n   * The `id` of the toast.\n   *\n   * Mostly used when you need to prevent duplicate.\n   * By default, we generate a unique `id` for each toast\n   */\n  id?: ToastId\n  /**\n   * Callback function to run side effects after the toast has closed.\n   */\n  onCloseComplete?: () => void\n  /**\n   * Optional style overrides for the container wrapping the toast component.\n   */\n  containerStyle?: StyleProps\n}\n\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\nexport function useToast(options?: UseToastOptions): CreateToastFnReturn {\n  const { theme } = useChakra()\n  const defaultOptions = useToastOptionContext()\n\n  return useMemo(\n    () =>\n      createToastFn(theme.direction, {\n        ...defaultOptions,\n        ...options,\n      }),\n    [options, theme.direction, defaultOptions],\n  )\n}\n\nexport default useToast\n"],"names":["_errors$name","_errors$email","_errors$password","navigate","useNavigate","_useForm","useForm","defaultValues","name","email","password","register","handleSubmit","reset","errors","formState","dispatch","useDispatch","toast","useToast","_jsx","AbsoluteCenter","axis","children","Box","display","w","flexDirection","_jsxs","onSubmit","data","signUpThunk","loginThunk","title","description","status","duration","isClosable","autoComplete","FormLabel","color","textShadow","mt","Input","_objectSpread","required","minLength","value","message","type","placeholder","size","mb","Text","Center","Button","colorScheme","width","isTabletOrMobile","useMediaQuery","query","h","backgroundImage","backgroundImgMobile","backgroundImg","backgroundPosition","backgroundRepeat","backgroundSize","Wrap","justify","pt","pr","onClick","RegistrationForm","options","theme","useChakra","defaultOptions","useToastOptionContext","useMemo","createToastFn","direction"],"sourceRoot":""}